{"mappings":"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","sources":["src/index.js","src/modules/class_KrThing.js","src/kraken_data_api_client/kraken_data_api_client.js","src/kraken_data_api_client/kraken_data_api_client_methods.js","src/modules/class_KrThings.js","src/modules/class_KrListItem.js","src/modules/class_KrAction.js","src/modules/class_KrPropertyValueSpecification.js","src/modules/class_krDb/class_krDb.js","src/modules/class_krCache/class_krCache.js"],"sourcesContent":["\nimport {KrThing as KrThingClass } from './modules/class_KrThing.js';\nimport {KrThings as KrThingsClass } from './modules/class_KrThings.js';\nimport {KrListItem as KrListItemClass } from './modules/class_KrListItem.js';\nimport {KrAction as KrActionClass } from './modules/class_KrAction.js';\nimport {KrPropertyValueSpecification as KrPropertyValueSpecificationClass } from './modules/class_KrPropertyValueSpecification.js';\n\nimport {KrDb as KrDbClass } from './modules/class_krDb/class_krDb.js';\n\n\nexport var KrThing = KrThingClass;\nexport var KrThings = KrThingsClass;\nexport var KrListItem = KrListItemClass;\nexport var KrPropertyValueSpecification = KrPropertyValueSpecificationClass\nexport var KrDb = KrDbClass\nexport var KrAction = KrActionClass\n","\n\n//import { KrThing as KrThingRecord } from '../../node_modules/krakenrecordjs/kraken_record/kraken_record.js';\n\nimport { KrThing as KrThingRecord } from 'krakenrecord';\n\n\nimport { KrakenSchemas } from 'krakenschema'\n\nimport { KrSamples } from 'krakenschema'\n\nimport { KrakenDataApiClient } from \"../kraken_data_api_client/kraken_data_api_client.js\";\n\n//import { kraken_bootstrap } from 'https://tactik8.github.io/krakenJsBootstrap/kraken_bootstrap/kraken_bootstrap.js'\n\n\n\n\nexport class KrThing extends KrThingRecord {\n    /* Contains metadata to qualify a value\n\n    attributes:\n    - credibility or c:    \n    - observationDate or d: \n    - record:         Returns all metadata in a dict\n    - object:         The original source of the data\n    - Instrument:     What brought the data over\n    - schema:         Schema object for thing\n\n\n    Methods\n    - equal:     Returns true if comes from same object\n    - lt:        Worst metadata in order of c and d\n    - gt:        Best metadata in order of c and d\n\n    */\n\n\n    constructor(record_type = null, record_id = null) {\n        super(record_type, record_id);\n        \n        \n    }\n\n\n    get html_form(){\n        //return get_html_form(this.record_type);\n    }\n\n\n    get schema(){\n        let schema = KrakenSchemas.get(this.record_type);\n        schema.thing = this\n        return schema\n    }\n\n\n    \n    // -----------------------------------------------------\n    //  Properties \n    // -----------------------------------------------------\n    \n    get actionStatus(){\n        return this.getProperty('actionStatus').value;\n    }\n    set actionStatus(value){\n        return this.replaceProperty('actionStatus', null, value);\n    }\n    \n    get endTime(){\n        return this.getProperty('endTime').value;\n    }\n    set endTime(value){\n        return this.replaceProperty('endTime', null, value);\n    }\n\n    get error(){\n        return this.getProperty('error').value;\n    }\n    set error(value){\n        return this.replaceProperty('error', null, value);\n    }\n    \n    get familyName(){\n        return this.getProperty('familyName').value;\n    }\n    set familyName(value){\n        return this.replaceProperty('familyName', null, value);\n    }\n    \n    get givenName(){\n        return this.getProperty('givenName').value;\n    }\n    set givenName(value){\n        return this.replaceProperty('givenName', null, value);\n    }\n    \n    get name(){\n        if(this.getProperty('name')){\n            return this.getProperty('name').value;\n        };\n        return null;\n    }\n    set name(value){\n        return this.replaceProperty('name', null,  value);\n    }\n\n    get startTime(){\n        return this.getProperty('startTime').value;\n    }\n    set startTime(value){\n        return this.replaceProperty('startTime', null, value);\n    }\n\n    get url(){\n        return this.getProperty('url').value;\n    }\n    set url(value){\n        return this.replaceProperty('url', null, value);\n    }\n\n    get position(){\n        return this.getProperty('position').value;\n    }\n    set position(value){\n        return this.replaceProperty('position', null, value);\n    }\n\n    \n    // ----------------\n    \n    get agent(){\n        var property = this.getProperty('agent');\n        if(property){\n            return property.value;\n        };\n        return null;\n    }\n\n    set agent(value){\n        return this.setProperty('agent', value);\n    }\n    get instrument(){\n        var property = this.getProperty('instrument');\n        if(property){\n            return property.value;\n        };\n        return null;\n    }\n    \n    set instrument(value){\n        return this.setProperty('instrument',value);\n    }\n    get object(){\n        var property = this.getProperty('object');\n        if(property){\n            return property.value;\n        };\n        return null;\n    }\n    set object(value){\n        return this.setProperty('object', value);\n    }\n    \n    get result(){\n        var result = this.getProperty('result');\n        if(!result){\n            result = new KrThing();\n            this.setProperty('result', result);\n        };\n        return result;\n    }\n    set result(value){\n        return this.setProperty('result', value);\n    }\n\n\n    new(record_type, record_id){\n        //super.method();\n        return new KrThing(record_type, record_id);\n    }\n\n    // API\n\n    async api_get() {\n\n        let previousRecord = this.getSystemRecord()\n        var k = new KrakenDataApiClient();\n        var fullRecord = await k.get(this.record_type, this.record_id)\n        \n        this.setSystemRecord(fullRecord);\n\n\n        if(this.getSystemRecord() != previousRecord){\n\n            let eventRecord = {\n                \"@type\": \"updateAction\",\n                \"@id\": String(crypto.randomUUID()),\n                \"targetCollection\": this.record_ref,\n                \"object\": this.record,\n                \"actionStatus\": \"completedActionStatus\",\n                \"timeStart\": new Date(),\n                \"timeEnd\": new Date()\n            }\n\n\n            const newEvent = new CustomEvent(\"kr-updateAction\", { detail: eventRecord });\n            this.dispatchEvent(newEvent)\n            \n        }\n       \n        return;\n        \n    }\n    async api_post() {\n        \n        var k = new KrakenDataApiClient();\n\n        let records = []\n        records.push(this.getSystemRecord())\n        \n        for(let t of this.things){\n            records.push(t.getSystemRecord())\n        }\n        \n        return await k.post(records);\n    }\n\n\n    // -----------------------------------------------------\n    //  Headings  \n    // -----------------------------------------------------\n\n\n    get_sample(record_id){\n        let r = KrSamples(this.record_type, record_id);\n        return r;\n    }\n\n    set_sample(record_id){\n\n        this.setFullRecord(KrSamples(this.record_type, record_id));\n    }\n\n\n    get headings(){\n        return this.schema.headings\n    }\n    get_heading1(){\n        \n        return this.schema.get_heading1(this.getBestRecord());\n    }\n    get_heading2(){\n        return this.schema.get_heading2(this.getBestRecord());\n    }\n    get_headingText(){\n        return this.schema.get_heading_text(this.getBestRecord());\n    }\n    get_headingImage(){\n        return this.schema.get_heading_image(this.getBestRecord());\n    }\n    \n\n}\n\n\n\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}","import { kraken_api_post_async } from './kraken_data_api_client_methods.js';\nimport { kraken_api_get_async } from './kraken_data_api_client_methods.js';\n\nexport class KrakenDataApiClient {\n    constructor(apiBaseUrl = null, apiPath = null) {\n\n        this.apiBaseUrl = apiBaseUrl;\n        this.apiPath = apiPath;\n        this.headers = null;\n        this.init_KrakenApi();\n\n    }\n\n    init_KrakenApi() {\n\n\n        //this.apiBaseUrl = 'https://5a37e52f-2a27-47ff-b754-2a573636cb5a-00-ayio2unothdd.spock.replit.dev'\n        //this.apiBaseUrl = this.apiBaseUrl || 'https://5a37e52f-2a27-47ff-b754-2a573636cb5a-00-ayio2unothdd.spock.replit.dev';\n\n        if(!this.apiBaseUrl){this.apiBaseUrl = this.apiBaseUrl || 'https://data.krknapi.com'};\n\n        if(!this.apiPath){this.apiPath = this.apiPath || '/api/test7'};\n\n        this.headers = this.headers || {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"bob\"\n        };\n\n    }\n\n    get(record_type, record_id) {\n\n        return kraken_api_get_async(this.apiBaseUrl, this.apiPath, this.headers, record_type, record_id);\n    }\n    post(record) {\n\n        return kraken_api_post_async(this.apiBaseUrl, this.apiPath, this.headers, record, this.headers);\n\n\n    }\n\n}\n\n\n\n","\n\n\n\n\nexport async function kraken_api_get_async(apiBaseUrl, apiPath, headers, record_type, record_id) {\n\n    const requestOptions = {\n        method: 'GET',\n        headers: headers,\n\n    };\n\n    let params = { \"@type\": record_type, \"@id\": record_id };\n\n    let new_url = new URL(apiPath, apiBaseUrl);\n    new_url.search = new URLSearchParams(params);\n\n\n    const response = await fetch(new_url, requestOptions)\n    \n    let record =  await response.json()\n    \n    return record\n\n}\n\n\n\n\n\nexport async function kraken_api_post_async(apiBaseUrl, apiPath, headers, record) {\n\n    \n    let requestOptions = {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(record)\n    };\n\n\n    let new_url = new URL(apiPath, apiBaseUrl);\n\n    \n    const response = await fetch(new_url, requestOptions)\n\n    \n    let result = await response.json();\n    return result\n}","\nimport { KrThing } from './class_KrThing.js';\nimport { KrListItem } from './class_KrListItem.js';\n\n\nexport class KrThings extends KrThing {\n    /* Contains metadata to qualify a value\n\n    attributes:\n    \n    - Items:     What brought the data over\n\n\n    Methods\n    - equal:     Returns true if comes from same object\n    - lt:        Worst metadata in order of c and d\n    - gt:        Best metadata in order of c and d\n\n    */\n\n\n    constructor(record_type=null, record_id=null) {\n        super(record_type, record_id);\n        this.record_type = 'ItemList'\n\n    }\n\n    get items(){\n\n        let results = [];\n        let t = this.firstItem\n        \n        while(t && t != null){\n            results.push(t)\n            t = t.nextItem\n        }\n        \n        return results\n    }\n\n\n    set items(values){\n\n        values = ensureArray(values)\n\n        // Sort values\n        function compare(a, b) {\n            if(a.position < b.position ){ return -1 };\n            if(a.position > b.position ){ return 1 };\n            return 0;\n        };\n\n        values.sort(compare);\n        \n        for(let value of values){\n            this.add(value)\n        }\n\n        return\n        \n    }\n\n\n    get record(){\n\n        return super.record\n    }\n    \n    set record(value){\n\n         //super.record = value\n        //return\n        \n        if(value.record_type){\n            // Handle thing\n            let properties = value.properties\n            for(p in properties){\n                if (p.propertyID != \"itemListElement\"){\n                    this._properties.push(p)   \n                }\n            }\n            this.items = value.getProperty('itemListElement')?.values\n            \n        } else {\n            // Handle record\n            for(let k of Object.keys(value)){\n                if(k != \"itemListElement\"){\n                    this.replaceProperty(k, null, value[k])\n                }                \n            }\n            this.items = value?.itemListElement\n        }\n    }\n\n    \n    get itemRecords(){\n\n        let items = this.getProperty('itemListElement').values\n\n        let results = []\n\n        for(let item of items){\n            results.push(item.item.record); \n        }\n        return results\n    }\n    \n    get itemFullRecords(){\n\n        let items = this.getProperty('itemListElement').values\n        \n        let results = []\n\n        for(let item of items){\n            results.push(item.item.fullRecord); \n        }   \n        return results\n    }\n\n    get firstItem(){\n\n        let items = this.getProperty('itemListElement').values\n        \n        if (items.length == 0){\n            return null\n        };\n\n        for (let item of items){\n            if(!item.previousItem || item.previousItem==null){\n                return item\n            }\n        }\n        \n        return null;\n        \n    }\n    \n    get lastItem(){\n\n        let items = this.getProperty('itemListElement').values\n        \n        if (items.length == 0){\n            return null;\n        };\n        for (let item of items){\n            if(item.nextItem === undefined || item.nextItem == null){\n                return item\n            }\n        }\n        return null;\n        \n    }\n    \n    add(listItem){\n\n        if(Array.isArray(listItem)){\n            for(let l of listItem){\n                this.add(l)\n            }\n            return   \n        }\n        \n        if(!(listItem instanceof KrListItem)){\n            listItem = new KrListItem(listItem);\n        };\n        \n        let lastItem = this.lastItem\n        \n        if (lastItem && lastItem != null){\n            listItem.position = lastItem.position + 1\n            listItem.previousItem = lastItem\n            listItem.nextItem = null\n            lastItem.nextItem = listItem\n            \n        } else {\n            \n            listItem.position = 0\n            listItem.previousItem = null\n            listItem.nextItem = null\n            \n        }\n\n        // Add to list if not already in it.\n        if (!this.get(listItem)){\n            this.addProperty('itemListElement', listItem)\n        }\n        return listItem\n    }\n\n    reCalculatePosition(){\n\n        return\n        let t = this.firstItem;\n        \n        var position = 0;\n        \n        while(t && t != null){\n            \n            t.position = position;\n            position = position + 1\n            t = t.nextItem\n           \n        }\n    }\n\n    // -----------------------------------------------------\n    //  CRUD for items \n    // -----------------------------------------------------\n\n    \n    remove(itemRef){\n\n        var item = this.get(itemRef)\n        if(!item){ \n            return null\n        }\n\n        var p = item.previousItem\n        var n = item.nextItem\n\n     \n        // Ressign before and after links to one another\n        if(p){ p.nextItem = n }\n        if(n){ n.previousItem = p }\n\n        // Remove from list\n        this.deleteProperty('itemListElement', item)\n\n        // Sets position\n        item.position = null;\n\n        // Sets position\n        let position = 0\n        if(n){ position = n.position - 1; n.position = position}\n        \n        let nextItem = n?.nextItem\n        while(nextItem){\n            nextItem.position = position + 1\n            position = position + 1\n            nextItem = nextItem.nextItem\n        }\n        \n        //this.reCalculatePosition()\n\n        // Remove links\n        item.previousItem = null\n        item.nextItem = null\n\n       \n        return\n        \n    }\n\n    \n    insertBefore(referenceItem, refItemtoInsert){\n\n        let item \n        // Convert to ListItem if not one already\n        if(!(refItemtoInsert instanceof KrListItem)){\n            refItemtoInsert = new KrListItem(refItemtoInsert);\n             item = refItemtoInsert\n        } else {\n             item = this.get(refItemtoInsert.ref)\n        }\n\n            \n        // Retrieve latest ListItem record\n  \n        var n = this.get(referenceItem)\n        var p = p.previousItem\n\n        // Stop events\n        this.blockEvents()\n        if(item){ item.blockEvents() }\n        if(p){ p.blockEvents() }\n        if(n){ n.blockEvents() }\n        \n        // Remove previous links of items\n        if((item.previousItem && item.previousItem != null) || (item.nextItem && item.nextItem != null)){\n            this.remove(item.ref)\n        }\n\n        \n        // Change allocation\n        item.previousItem = p;\n        item.nextItem = n;\n\n        if(p){ p.nextItem = item;} else { p.nextItem = null };\n        if(n){ n.previousItem = item; } else { n.previousItem = null};\n\n        // Start events\n        this.allowEvents()\n        if(item){ item.allowEvents() }\n        if(p){ p.allowEvents() }\n        if(n){ n.allowEvents() }\n\n        // Sets position\n        let position = 0\n        if(p){ position = p.position + 1}\n\n        item.position = position\n        let nextItem = item.nextItem\n        while(nextItem){\n            nextItem.position = position + 1\n            position = position + 1\n            nextItem = nextItem.nextItem\n        }\n\n        //  Add to list\n        let t = this.get(refItemtoInsert.ref)\n        if(!t || t== null){\n            this.addProperty('itemListElement', refItemtoInsert)\n        }\n        \n        return item\n    }\n    \n    \n    insertAfter(referenceItem, refItemtoInsert){\n        /**\n         * \n         */\n\n       let item\n        // Convert to ListItem if not one already\n        if(!(refItemtoInsert instanceof KrListItem)){\n            refItemtoInsert = new KrListItem(refItemtoInsert);\n             item = refItemtoInsert\n        } else {\n             item = this.get(refItemtoInsert.ref)\n        }\n\n\n        // Stop events\n        this.blockEvents()\n        if(item){ item.blockEvents() }\n        if(p){ p.blockEvents() }\n        if(n){ n.blockEvents() }\n\n\n        \n        // Remove previous links of items\n        if((item.previousItem && item.previousItem != null) || (item.nextItem && item.nextItem != null)){\n            this.remove(item.ref)\n        }\n       \n\n        var p = this.get(referenceItem)\n        var n = p.nextItem\n        \n        // Change allocation\n        item.previousItem = p;\n        item.nextItem = n;\n\n        if(p){ p.nextItem = item;} else { p.nextItem = null};\n        if(n){ n.previousItem = item; } else { n.previousItem = null};\n\n\n        // Start events\n        this.allowEvents()\n        if(item){ item.allowEvents() }\n        if(p){ p.allowEvents() }\n        if(n){ n.allowEvents() }\n        \n        // Change position\n        let position = 0\n        if(p){ position = p.position + 1}\n\n        item.position = position\n        let nextItem = item.nextItem\n        while(nextItem){\n            nextItem.position = position + 1\n            position = position + 1\n            nextItem = nextItem.nextItem\n        }\n\n        //  Add to list\n        let t = this.get(refItemtoInsert.ref)\n        if(!t || t== null){\n            this.addProperty('itemListElement', refItemtoInsert)\n        }\n\n        \n        return item\n    }\n\n    get(ref){\n\n        if(!ref){ return null};\n        \n        if(ref && ref.ref){ ref = ref.ref};\n        \n        if (!ref || !ref['@type'] || ref['@type'] == null){ return null };\n\n        if (ref['@type'] == 'ListItem'){\n            return this.getByListItem(ref);\n        } else {\n            return this.getByItem(ref);\n        };\n        \n    }\n\n    getByListItem(ref){\n\n        let items = this.getProperty('itemListElement').values\n\n        for(let item of items){\n            if(item.record_type == ref['@type'] && item.record_id == ref['@id']){\n                return item\n            }   \n        }\n        return null;\n    }\n\n    \n    getByItem(ref){\n\n        \n        let items = this.getProperty('itemListElement').values\n        for(let item of items){\n            if(item.item.record_type == ref['@type'] && item.item.record_id == ref['@id']){\n                return item\n            }      \n        }\n        return null;\n        \n    }\n\n\n    // -----------------------------------------------------\n    //  Filters \n    // -----------------------------------------------------\n\n    filter(propertyValueSpecifications){\n        /**\n         * Returns new Things with filtered items\n         */\n\n\n        let newThings = new KrThings()\n\n        \n        for(let item of this.items){\n          \n            let result = propertyValueSpecifications.map(pvs => pvs.test(item.item));\n           \n            if (result.every(Boolean) == true){\n                newThings.add(item.item)\n            }\n        }\n\n        return newThings\n    }\n\n    \n    // -----------------------------------------------------\n    //  HTML components \n    // -----------------------------------------------------\n\n    \n    // -----------------------------------------------------\n    //  API \n    // -----------------------------------------------------\n\n    \n  \n    \n}\n\n\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}","\nimport { KrThing } from './class_KrThing.js';\n\n\nexport class KrListItem extends KrThing {\n    /* Contains metadata to qualify a value\n\n    attributes:\n\n    - Items:     What brought the data over\n\n\n    Methods\n    - equal:     Returns true if comes from same object\n    - lt:        Worst metadata in order of c and d\n    - gt:        Best metadata in order of c and d\n\n    */\n\n\n    constructor(item, record_id) {\n        super('ListItem', record_id);\n        if(item && item != null){\n            if(item?.['@type'] == \"ListItem\"){\n                this.record = item\n            }\n            else if(item?.['record_type'] == \"ListItem\"){\n                this.thing = item\n            } else {\n                this.replaceProperty('item', null, item);\n            }\n            \n        }\n        \n        //if(!record_id){this.replaceProperty('@id', null, String(crypto.randomUUID()))}\n    }\n\n\n    get item(){\n        if(this.getProperty('item')){\n            return this.getProperty('item').value;\n        };\n        return null;\n    }\n    set item(value){\n        this.replaceProperty('item', null, value);\n    }\n\n    get previousItem(){\n        if(this.getProperty('previousItem')){\n            return this.getProperty('previousItem')?.value || null;\n        };\n        return null;\n    }\n    set previousItem(value){\n        //if(value && value.ref){ value = value.ref};\n        this.replaceProperty('previousItem', null, value);\n    }\n    get nextItem(){\n        if(this.getProperty('nextItem')){\n            return this.getProperty('nextItem')?.value || null;\n        };\n        return null;\n       \n    }\n    set nextItem(value){\n\n        //if(value && value.ref){ value = value.ref};\n        this.replaceProperty('nextItem', null, value);\n    }\n\n    get position(){\n        if(this.getProperty('position')){\n            return this.getProperty('position')?.value || null;\n        };\n        return null;\n    }\n    set position(value){\n        this.replaceProperty('position', null, value);\n    }\n  \n}\n\n","\n\n\nimport {KrThing } from './class_KrThing.js';\n\nexport class KrAction extends KrThing {\n    /**\n     * \n     */\n\n\n    constructor(object, result, error) {\n        super('Action');\n\n        if(object){this.object = object}\n        if(result){this.result = result}      \n        \n        if(error){\n            this.error = error;\n            this.actionStatus = 'failedActionStatus';\n        }        \n\n        this.startTimer()\n    }\n\n    get object(){\n        return this.getProperty('object').value\n    }\n\n    set object(value){\n        this.setProperty('object', value)\n    }\n\n    get instrument(){\n        return this.getProperty('instrument').value\n    }\n\n    set instrument(value){\n        this.setProperty('instrument', value)\n    }\n\n    get result(){\n        return this.getProperty('result').value\n    }\n\n    set result(value){\n        this.setProperty('result', value)\n        this.setCompleted()\n    }\n\n    get startTime(){\n        return this.getProperty('startTime').value\n    }\n\n    set startTime(value){\n        this.replaceProperty('startTime', null, value)\n    }\n\n    get endTime(){\n        return this.getProperty('endTime').value\n    }\n\n    set endTime(value){\n        this.setProperty('endTime', value)\n    }\n\n    get actionStatus(){\n        return this.getProperty('actionStatus').value\n    }\n\n    set actionStatus(value){\n        this.replaceProperty('actionStatus', null, value)\n    }\n\n    get error(){\n        return this.getProperty('error').value\n    }\n\n    set error(value){\n        this.setProperty('error', value)\n    }\n\n\n    // time shortcuts\n    startTimer(){\n\n        let date = new Date()\n        this.startTime = date\n        this.actionStatus = 'ActiveActionStatus'\n    }\n\n    stopTimer(){\n        this.endTime = new Date()\n    }\n\n    duration(){\n        let startTime = this.startTime\n        let endTime = this.endTime || new Date()\n\n        if(startTime){\n            return endTime - startTime\n        }\n        return undefined\n    }\n\n\n    // Action Status shortcuts\n\n    isSuccess(){\n        return this.actionStatus == \"CompletedActionStatus\"\n    }\n\n    setCompleted(){\n        this.actionStatus = \"CompletedActionStatus\"\n        if(!this.startTime){ this.startTimer() }\n        if(!this.endTime){ this.stopTimer() }\n        this.error = undefined\n    }\n\n    setFailed(errorMessage){\n        this.actionStatus = \"FailedActionStatus\"\n        this.error = errorMessage\n    }\n\n    // HTML shortcuts\n\n    get htmlStatus(){\n        if(this.isSuccess == true){\n            return 200\n        } else {\n            return 400\n        }\n    }\n    \n    get htmlContent(){\n        if(!this.result || this.result== null) { return null }\n        if(Array.isArray(this.result)){\n            return this.result.map(x=> x.getSystemRecord(10))\n        } else if (this.result.record_type){\n            return this.result.getSystemRecord(10)\n        } else {\n            return this.result\n        }\n    }\n\n    // Text output\n    get textContent(){\n\n        let date = convertToDate(this.startTime)\n        if(date && date != null){ date = date.toISOString().split('T')[0]}\n        \n        let time = convertToDate(this.startTime)\n        if(time && time != null){ time = time.toLocaleTimeString()}\n\n        let status = this.actionStatus\n        if(status && status != null){ status = status.replace('ActionStatus', '').toUpperCase()}\n\n        let name = this.name\n        if(!name || name == null){ name = ''}\n\n        let error = this.error\n        if(!error || error == null){ error = ''}\n\n        let record_type = this.record_type\n        if(record_type && record_type != null){ record_type = record_type.replace('Action', '')}\n          \n        let content = `${date}, ${time} - ${status || ''} - ${record_type || ''} ${name || ''} ${error || ''}`\n        return content\n    }\n\n    \n}\n\n\n\nfunction convertToDate(value) {\n    if (value instanceof Date && !isNaN(value)) {\n        return value;\n    }\n\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) {\n        return date;\n    }\n\n    return null;\n}","\nimport { KrThing as KrThingRecord } from 'krakenrecord';\n\n\nimport {KrThing } from './class_KrThing.js';\n\nexport class KrPropertyValueSpecification extends KrThing {\n    /* Contains metadata to qualify a value\n\n    attributes:\n    - credibility or c:    \n    - observationDate or d: \n    - record:         Returns all metadata in a dict\n    - object:         The original source of the data\n    - Instrument:     What brought the data over\n\n\n    Methods\n    - equal:     Returns true if comes from same object\n    - lt:        Worst metadata in order of c and d\n    - gt:        Best metadata in order of c and d\n\n    */\n\n\n    constructor(object, result, error) {\n        super('Action', null);\n\n        this.actionStatus = 'completedActionStatus';\n        this.startTime = new Date();\n        this.endTime = new Date();\n        if(object){this.setProperty('object', object)};\n        if(result){this.setProperty('result', result)};\n\n\n        if(!this.object){ this.setProperty('object', new KrThing())};\n        if(!this.instrument){ this.setProperty('instrument', new KrThing())};\n        if(!this.agent){ this.setProperty('agent', new KrThing())};\n        if(!this.result){ this.setProperty('result', new KrThing())};\n        \n        if(error){\n            this.error = error;\n            this.actionStatus = 'failedActionStatus';\n        }        \n    }\n\n\n\n    // -----------------------------------------------------\n    //  Methods \n    // -----------------------------------------------------\n\n    test(thing){\n        /**\n         * Test if a given thing meets the condition \n         */\n\n        let propertyID = this.propertyID\n        let value = thing.getProperty(propertyID).value\n\n        \n        // Test min / max value\n        if (this.minValue){\n            if (value < this.minValue) { return false }\n        }\n        if (this.maxValue){\n            if (value > this.maxValue) { return false }\n        }\n\n        // Test valueRequired\n        if (this.valueRequired == true && (value === undefined || value === null )){\n            return false\n        }\n\n        // Test valuePattern\n        if(this.valuePattern){\n            const re = new RegExp(this.valuePattern);\n            const result = re.test(value)\n            if(result == false){ return false }\n        }\n\n        // Default\n        return true\n    }\n\n\n    // -----------------------------------------------------\n    //  Helpers to build conditions \n    // -----------------------------------------------------\n\n    setEqualTo(value){\n        if(typeof value != \"string\"){\n            this.minValue = value\n            this.maxValue = value\n        } else {\n            this.valuePattern = `^${value}$`\n        }\n    }\n\n    setContains(value){\n        this.valuePattern = `${value}`\n    }\n\n    setContainsWord(value){\n        this.valuePattern = `\\\\b${value}\\\\b`\n    }\n\n    setStartsWith(value){\n        this.valuePattern = `^${value}`\n    }\n\n    setEndsWith(value){\n        this.valuePattern = `${value}$`\n    }\n    \n    setGE(value){\n        this.minValue = value\n    }\n\n    setLE(value){\n        this.maxValue = value\n    }\n    \n\n    // -----------------------------------------------------\n    // ---------------- Specific properties ----------------\n    // -----------------------------------------------------\n    \n    get defaultValue(){\n        return this.getProperty('defaultValue').value \n    }\n    set defaultValue(value){\n        this.setProperty('defaultValue', value)\n    }\n\n    get maxValue(){\n        return this.getProperty('maxValue').value \n    }\n    set maxValue(value){\n        this.setProperty('maxValue', value)\n    }\n\n    get minValue(){\n        return this.getProperty('minValue').value \n    }\n    set minValue(value){\n        this.setProperty('minValue', value)\n    }\n\n    get multipleValues(){\n        return this.getProperty('multipleValues').value \n    }\n    set multipleValues(value){\n        this.setProperty('multipleValues', value)\n    }\n\n    get readonlyValue(){\n        return this.getProperty('readonlyValue').value \n    }\n    set readonlyValue(value){\n        this.setProperty('readonlyValue', value)\n    }\n\n    get stepValue(){\n        return this.getProperty('stepValue').value \n    }\n    set stepValue(value){\n        this.setProperty('stepValue', value)\n    }\n\n    get valueMaxLength(){\n        return this.getProperty('valueMaxLength').value \n    }\n    set valueMaxLength(value){\n        this.setProperty('valueMaxLength', value)\n    }\n\n\n    get valueMinLength(){\n        return this.getProperty('valueMinLength').value \n    }\n    set valueMinLength(value){\n        this.setProperty('valueMinLength', value)\n    }\n\n    get valueName(){\n        return this.getProperty('valueName').value \n    }\n    set valueName(value){\n        this.setProperty('valueName', value)\n    }\n\n    get valuePattern(){\n        return this.getProperty('valuePattern').value \n    }\n    set valuePattern(value){\n        this.setProperty('valuePattern', value)\n    }\n\n    get valueRequired(){\n        return this.getProperty('valueRequired').value \n    }\n    set valueRequired(value){\n        this.setProperty('valueRequired', value)\n    }\n\n    get propertyID(){\n        return this.getProperty('propertyID').value \n    }\n    set propertyID(value){\n        this.setProperty('propertyID', value)\n    }\n    \n}","\nimport {KrThing} from '../class_KrThing.js'\n\nimport { KrCache } from '../class_krCache/class_krCache.js'\n\n\n\n//const API_URL = 'https://data.krknapi.com/api/test7'\n\nconst API_URL ='https://2d432316-7c15-4f0f-9214-d4f6fba60627-00-1b1hmvrd8c12s.spock.replit.dev/api/test7'\n\nexport class KrDb {\n    /**\n     * Database to store things and access API\n     *\n     * Attributes:\n     * - _api_url: the url for the api\n     * - things: Lis tof all things in db cache local\n     *\n     * Methods:\n     * - get: get thing from local cache\n     * - set: set thing in local cache\n     * - getFromApi: get from api\n     * - postToApi: post to Api\n     * - postAll: post all things to api\n     * - refreshAll: refresh all things from api\n     * \n     */\n\n\n    constructor(api_url=null) {\n        this._localCache = new KrCache()\n        this._apiCache = new KrCache()        \n        this._api_url = api_url || API_URL        \n    }\n\n    get things(){\n        return this._localCache.things\n    }\n\n    get(record_type, record_id){\n        /**\n         * Returns thing from local cache.\n         * If not present, creates one and calls api to refresh data\n         */\n        let localThing =  this._localCache.get(record_type, record_id)\n        if(localThing && localThing != null){\n            return localThing\n            \n        } else {\n\n            let thing = new KrThing(record_type, record_id)\n            this._localCache.set(thing)\n            this.getFromApi(record_type, record_id)\n        }\n        \n    }\n    \n    set(thing){\n        this._localCache.set(thing)\n\n        for(let t of thing.things){\n            let localT = this._localCache.get(t.record_type, t.record_id)\n            if(!localT || localT == null){\n                this._localCache.set(t)\n            }\n        }        \n    }\n\n    async postAll(){\n        /**\n         * Posts all thing to API if they have changed\n         */\n        let records = []\n        for(let t of this._localCache.things){\n            console.log('t',t.record_type, t.record_id)\n            if(this._testIsInSync(t.record_type, t.record_id)== false){ \n                records.push(t.getSystemRecord())\n                \n            }\n        }\n        let result = await postRecordToApi(this._api_url, records)\n        return result\n    }\n\n    async refreshAll(){\n        /**\n         * Retrieve latest value from api\n         */\n        let results = []\n        for(let thing of this._apiCache.things){\n            let result = await this.getFromApi(thing.record_type, thing.record_id)\n            results.push(result)\n        }\n        return results\n    }\n\n    _testIsInSync(record_type, record_id){\n        /**\n         * Returns true if api cache is equal to local cache\n         */\n\n        let local = this._localCache.get(record_type, record_id)\n        let api = this._apiCache.get(record_type, record_id)\n\n        let localRecord = JSON.stringify(local)\n        let apiRecord = JSON.stringify(api)\n\n        return localRecord == apiRecord\n        \n    }\n\n\n    async getFromApi(record_type, record_id){\n        /**\n         * Updates local thing with value from API\n         */\n\n\n        // Retrieve record from api\n        let systemRecord = await getRecordFromApi(this._api_url, record_type, record_id)\n        if(!systemRecord || systemRecord == null) { return }\n\n        // Store api thing in cache\n        let apiThing = new KrThing()\n        apiThing.setSystemRecord(systemRecord)\n        this._apiCache.set(apiThing)\n        \n        // Retrieve corresponding thing from local cache\n        let thing = this._localCache.get(record_type, record_id)\n\n        // Create new thing if not exist\n        if(! thing || thing == null){\n            thing = new KrThing()\n            this._localCache.set(thing)\n        }\n\n        // Load record to thing\n        thing.setSystemRecord(systemRecord)\n        \n        return thing\n    \n    }\n\n\n    async postToApi(thing){\n\n        // Skip if already in sync\n        if(this._testIsInSync(thing.record_type, thing.record_id)){ return true }\n\n        let result = await postRecordToApi(this._api_url, thing.getSystemRecord())\n        return result\n    }\n}\n\n\n\nasync function getRecordFromApi(api_url, record_type, record_id){\n\n    let url = `${api_url}?record_type=${record_type}&record_id=${record_id}` \n    \n    const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        \n      });\n\n\n    let text = await response.text()\n\n    let systemRecord = null\n    if(text){\n        systemRecord = JSON.stringify(text)\n    } else { return false }\n\n    return systemRecord\n    \n}\n\n\nasync function postRecordToApi(api_url, record){\n\n    let url = api_url \n\n    const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n        body: JSON.stringify(record), \n    });\n\n\n    let result = await response.json()\n\n    return result\n}","\n\n\nexport class KrCache {\n    /**\n     * Cache to store things\n     */\n\n\n    constructor(maxTime=null) {\n        \n        this._db = {}\n        this._maxTime = maxTime\n    }\n\n    get(record_type, record_id){\n\n        if(!record_type || record_type == null) { return null }\n        if(!record_id || record_id == null) { return null }\n\n        return this._db?.[record_type]?.[record_id]?.['item'] || null\n        \n    }\n\n    set(thing){\n\n        let record_type = thing.record_type\n        let record_id = thing.record_id\n        \n        if(!record_type || record_type == null) { return null }\n        if(!record_id || record_id == null) { return null }\n\n        this._db[record_type] = this._db[record_type] || {}\n        this._db[record_type][record_id] = this._db[record_type][record_id] || {}\n        this._db[record_type][record_id].item = thing\n        this._db[record_type][record_id].date = Date()\n    }\n\n\n    post(thing){\n        return this.set(thing)\n    }\n    \n    get things(){\n\n        let things = []\n        for(let record_type of Object.keys(this._db)){\n\n            for(let record_id of Object.keys(this._db[record_type])){\n                let thing = this.get(record_type, record_id)\n                things.push(thing)\n            }\n        }\n        return things\n    }\n\n}\n\n"],"names":[],"version":3,"file":"main.js.map"}